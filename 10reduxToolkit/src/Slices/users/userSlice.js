import {createSlice} from "@reduxjs/toolkit"
import { createAsyncThunk } from "@reduxjs/toolkit"
import axios from "axios"


const initialState = {
    loading: false,
    usersArr: [],
    error: ""
}

// redux toolkit provide a (createAsyncThunk) function to implement the creation and dispatching of async actions.
// The (createAsyncThunk) accept two parameters, 1. the action name/type, 2. callback function that create payload.
// so (createAsyncThunk) generate, pending, fulfill and reject action type, we can listen these action types with reducer function and perform necessary state transition, the reducer are not generated by the slice, but have to be added as extraReducer.
export const fetchUsers = createAsyncThunk("users/fetchUsers", () =>{
    // To make the actual API request we need the axios. 
    return axios.get('https://jsonplaceholder.typicode.com/users')
    .then( (response) => response.data)

})

const userSlice = createSlice({
    name: "users",
    initialState,
    // the function recieve (builder as an argument)
    // using builder we add cases for each of the promise lifecycle method.
    extraReducers: (builder) =>{                    
        builder.addCase(fetchUsers.pending, (state) =>{
            state.loading = true
        })
        builder.addCase(fetchUsers.fulfilled, (state,action) =>{
            state.loading = false,
            state.usersArr = action.payload              // we get the data from url here in payload.
            state.error = ""
        })
        builder.addCase(fetchUsers.rejected, (state, action) =>{
            state.loading = false
            state.usersArr = []
            state.error = action.error.message             // action is the url that are pass to (fetchUser) 
        })
    }       
})

export default userSlice.reducer;